// Generated by CoffeeScript 1.6.3
(function() {
  window.Trails = (function() {
    function Trails() {
      var self;
      self = this;
      window.onhashchange = function(e) {
        return self._handle(e.newURL);
      };
      window.onload = function() {
        return self._handle(window.location);
      };
    }

    Trails.prototype.routes = [];

    Trails.prototype.route = function(path, handler) {
      var args, newRoute, originalPath, paramNames;
      originalPath = path;
      args = Array.prototype.slice.call(arguments);
      path = args.shift();
      paramNames = path.match(/:([\w\d]+)/g) || [];
      paramNames = paramNames.map(function(x) {
        return x.substring(1);
      });
      path = new RegExp("^" + path.replace(/\./, '\\.').replace(/\*/g, '(.+)').replace(/:([\w\d]+)/g, "([^\/\?]+)") + '$');
      newRoute = {
        path: path,
        originalPath: originalPath,
        handler: handler,
        paramNames: paramNames
      };
      return this.routes.push(newRoute);
    };

    Trails.prototype.vomit = function() {
      return this.routes;
    };

    Trails.prototype._handle = function(url) {
      var args, params, path, proxyAnchor, route, routeParamValues;
      proxyAnchor = document.createElement('a');
      proxyAnchor.href = url;
      path = proxyAnchor.hash.replace('#!', '');
      route = this._match(path);
      if (!route) {
        alert('404');
      }
      params = {};
      routeParamValues = route.path.exec(path);
      if (routeParamValues) {
        routeParamValues.shift();
        routeParamValues.map(decodeURIComponent).forEach(function(val, indx) {
          if (route.paramNames && route.paramNames.length > indx) {
            return params[route.paramNames[indx]] = val;
          } else if (val) {
            params.splat = params.splat || [];
            return params.splat.push(val);
          }
        });
      }
      args = {
        full: route.originalPath,
        params: params
      };
      return route.handler(args);
    };

    Trails.prototype._match = function(path) {
      var r, route, _i, _len, _ref;
      route = {};
      _ref = this.routes;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (path.match(r.path || decodeURIComponent(path).match(r.path))) {
          route = r;
        }
      }
      return route;
    };

    return Trails;

  })();

}).call(this);
